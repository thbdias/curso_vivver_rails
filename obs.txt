.scaffold
  .rails g(acao) scaffold <Modelo> <campo>:<tipo>
  .todo modelo deve ter a letra maiúscula e no singular

.ORM (object relational mapper)
  .relação dos objetos com os dados que os mesmos representam
  .fica no meio traduzindo o que está em ruby para sql e vice-versa

.ActiveRecord é o ORM do Rails
  .fica no meio do caminho do Ruby com o Sql

.migrations
  .rake db:create -> cria as tabelas no bd
  .rake db:migrate -> realiza a migração das tabelas do ruby para o bd

.acesso ao sistema no broser
  .http://<url-padrão>/nome-do-controller

.o controller recebe a ação inicial do usuário
  .controller
	def index 
    	@kinds = Kind.all 
	end
		.Kind = model
    	.all = select * from
		.@kinds = variável de instância - para cada pessoa que acessar a página vai ter uma variável dedicada
		.@kinds = fica disponível no controller e na view

.rails g controller <controller> <action>

.routes
  .root 'home#index'
    .página raíz -> controller 'home' ação 'index'
	.localhost:3000/rails/info/routes -> todas rotas da aplicação
  .para cada pasta dentro da view há um arquivo dentro da de helpers.
  .os helpers fazem referência as views
  .tipos de rotas
    .resources :"nome do recurso"
        .ex recurso: kind (editar, mostrar, deletar, criar)
    ."verbo" "path (controller/ação)"
        .ex get 'home/index'
    .mapeamento
        .ex get 'home/bemvindo' => 'home#index'
    .only [:ação, :ação]
    .except [:ação]

.simular verbos HTTP
  .postman extension (google chrome)

.REST   
            HTTP/REST    CRUD            SQL

            .POST         Create          INSERT
            .GET          Retrieve        SELECT
            .PUT          Update          UPDATE
            .DELETE       Delete          DELETE


.erb = embedded ruby
  .<%  -> o código ruby não é mostrado na tela
  .<%= -> o código ruby é mostrado na tela

.helper collection_select
  .seleção/coleção que vão vir do banco de dados

.partial
  .reaproveitar trechos de páginas
  .passar variavel para dentro de partial: usar locals { varFora: varDentro}


rails console
  .inicializa junto com a aplicação
  .pode-se trabalhar com os models da aplicação
  .

.active record
  .está para as operações CRUD
  .framework responsável por fazer o ORM do rails
  .CREATE -> <model>.new ou <model>.create
  .READ -> <model>.all, <model>.first, <model>.where, <model>.last
  .UPDATE -> <model>.find / save
             <model>.find / update
             <model>.update_all "field = value"
  .DELETE -> <model>.find / destroy 


x.times
  .parecido com for
  .x = uma constante

.rake db:drop
  .apagar todo banco de dados

.rake -T
  .mostra todas as tarefas

.seed
  .quando se usar o seed, usar 'create' com '!'
    .Kind.create!(...) => força a gravar no banco de dados

.gem faker
  .dados falsos

.task
  .rails g task <name> <action> => criar novas tarefas

.params
  .elemento mais importante quando há troca/envio de dados

.nested attributes   
  .trabalhar com atributos/parametros aninhados/misturar no active record

.fields_for
  .helper que permite utilizar atributos aninhados dentro do formulario


.i18n => internationalization
  .configurar idiomas
  .config/application.rb
  .duas formas: translate / localize


.testar helpers no rails console
  .<Controller>.helpers.<helper>
    .puts ApplicationController.helpers.link_to "teste", "/teste"
      .a saída é como será no html o comando link_to


.associação has_many

.gem cocoon
  .possibilita trabalhar de forma dinamica com formularios aninhados


.helper cycle
  .zebrar tabela





















