.scaffold
  .rails g(acao) scaffold <Modelo> <campo>:<tipo>
  .todo modelo deve ter a letra maiúscula e no singular

.ORM (object relational mapper)
  .relação dos objetos com os dados que os mesmos representam
  .fica no meio traduzindo o que está em ruby para sql e vice-versa

.ActiveRecord é o ORM do Rails
  .fica no meio do caminho do Ruby com o Sql

.migrations
  .rake db:create -> cria as tabelas no bd
  .rake db:migrate -> realiza a migração das tabelas do ruby para o bd

.acesso ao sistema no broser
  .http://<url-padrão>/nome-do-controller

.o controller recebe a ação inicial do usuário
  .controller
	def index 
    	@kinds = Kind.all 
	end
		.Kind = model
    	.all = select * from
		.@kinds = variável de instância - para cada pessoa que acessar a página vai ter uma variável dedicada
		.@kinds = fica disponível no controller e na view

.rails g controller <controller> <action>

.routes
  .root 'home#index'
    .página raíz -> controller 'home' ação 'index'
	.localhost:3000/rails/info/routes -> todas rotas da aplicação
  .para cada pasta dentro da view há um arquivo dentro da de helpers.
  .os helpers fazem referência as views
  .tipos de rotas
    .resources :"nome do recurso"
        .ex recurso: kind (editar, mostrar, deletar, criar)
    ."verbo" "path (controller/ação)"
        .ex get 'home/index'
    .mapeamento
        .ex get 'home/bemvindo' => 'home#index'
    .only [:ação, :ação]
    .except [:ação]

.simular verbos HTTP
  .postman extension (google chrome)

.REST   
            HTTP/REST    CRUD            SQL

            .POST         Create          INSERT
            .GET          Retrieve        SELECT
            .PUT          Update          UPDATE
            .DELETE       Delete          DELETE


.erb = embedded ruby
  .<%  -> o código ruby não é mostrado na tela
  .<%= -> o código ruby é mostrado na tela

.helper collection_select
  .seleção/coleção que vão vir do banco de dados

.partial
  .reaproveitar trechos de páginas
  .passar variavel para dentro de partial: usar locals { varFora: varDentro}


rails console
  .inicializa junto com a aplicação
  .pode-se trabalhar com os models da aplicação
  .

.active record
  .está para as operações CRUD
  .framework responsável por fazer o ORM do rails
  .CREATE -> <model>.new ou <model>.create
  .READ -> <model>.all, <model>.first, <model>.where, <model>.last
  .UPDATE -> <model>.find / save
             <model>.find / update
             <model>.update_all "field = value"
  .DELETE -> <model>.find / destroy 


x.times
  .parecido com for
  .x = uma constante

.rake db:drop
  .apagar todo banco de dados

.rake -T
  .mostra todas as tarefas

.seed
  .quando se usar o seed, usar 'create' com '!'
    .Kind.create!(...) => força a gravar no banco de dados

.gem faker
  .dados falsos

.task
  .rails g task <name> <action> => criar novas tarefas

.params
  .elemento mais importante quando há troca/envio de dados

.nested attributes   
  .trabalhar com atributos/parametros aninhados/misturar no active record

.fields_for
  .helper que permite utilizar atributos aninhados dentro do formulario


.i18n => internationalization
  .configurar idiomas
  .config/application.rb
  .duas formas: translate / localize


.testar helpers no rails console
  .<Controller>.helpers.<helper>
    .puts ApplicationController.helpers.link_to "teste", "/teste"
      .a saída é como será no html o comando link_to


.associação has_many

.gem cocoon
  .possibilita trabalhar de forma dinamica com formularios aninhados


.helper cycle
  .zebrar tabela

.paginação
  .gem kaminari (mais atual e possui mais coisas que a will_paginate)
  .will_paginate (mais antiga)


.validações
  .conhecidas como: active record validations (feito no backend)
  .possui todos tipos de validações (olhar documentação)

.filters
   .before_action ..., only[...]

.asset pipeline (necessário rever - algumas coisas sem entender ainda)
  .já vem por padrão no rails 
  .pega todos assets(css, sass, javascript, images), concatena e minimifica
  .permite uso de sass, coffeScript, erb
  .é possível colocar/carregar um asset precompilado para algum controller específico(de acordo com o controller que se está)

.fingerprinting 
  .estratégia do asset pipeline 
  .o browser faz cache dos arquivos para aumentar o desempenho, porém as
    alterações feitas no css por exemplos não são mostradas no braser.
    Para resolver isso, o fingerprinting coloca um número na frente do 
    nome do arquivo e quando atualizado esse número se altera e o browser
    reconhece como novo arquivo.

.execJs (executor js)
  .rodar código javascript a partir do ruby 
  .é uma runtime para javascript
  .o melhor é o node js 

.ajax
  .remote: true => ativa a chamada java script
    .a chamada do controller chega como JS e não como html
  .respond_to
    .format.html
    .format.js

.ciclo rails ajax 
  browser > controller > js > browser

.usando biblioteca externa
  . incluir em config/initializers/assests.rb (...precompile += )
  . incluir em app/views/layouts/app.html.erb ( <%= javascript_include_tag 'notifyjs/notify' %>)

.conhecendo o Bower 
  .gerenciador de bibliotecas js que estão na internet (semelhante ao gemfile)
  .ter o node (instalar usando NVM: https://www.digitalocean.com/community/tutorials/como-instalar-o-node-js-no-ubuntu-16-04-pt) e o git instalado

.rails-assets 
  .usar o gemfile para gerenciar também as bibliotecas js, ao invés de ter que usar o bower para gerenciar.

.rake tasks para assets, logs e tmp's 
  .rake -T assets => mostrar quais são as tarefas disponíveis para assets
  .rake -T log => 
  .rake -T tmp => arquivos temporários

.segurança
  .(deu erro)

.templates engine
  .haml
  .slim

.form builders 
  .formtastic
  .simple_form

.bootstrap
  .

======================================================================
            MODULO 2
======================================================================

.ferramentas
  .virtualbox
  .vagrant (trabalhar com virtualbox em linha de comando)
  .sublime text


.configuração do ambiente Rails
  .apt-get install -y build-essential autoconf bison libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm-dev --allow-unauthenticated
  .apt-get install git
  .git config --global user.name '<name>'
  .git config --global user.email <email>
  .git config -l
  .não vi o vídeo completo...falta coisas ainda 

.instalando rails
  .gem install rails <-v 4.2.5 'opicional'>
  .rails -v 
  .sudo apt-get install nodejs (não usar esse modo - ver linha 185 deste arquivo)
  .nodejs --version 

.mysql
  .sudo apt-get install mysql-client mysql-server libmysqlclient-dev 
  .acessar mysql pelo terminal:
    .mysql -u root -p         (u => usuario) (p => password)

.postgresql
  .sudo apt-get install postgresql postgresql-contrib libpq-dev
  .criando usuário:
    .sudo -u postgres createuser -rds vagrant (vagrant => nome usuario)
  .criando um BD com o mesmo nome do usuário
    .createdb vagrant 

.gemset
  .recurso do rvm
  .gemset é um diretório separado de gem 
  .criando uma gemset
    .rvm gemset create udemy (udemy => nome da gemset)
  .usando uma gemset
    .rvm 2.3@udemy (2.3 => versão do ruby)
    .gem list (lista gems de um diretório do gemset)

.sublimeText
  .command palette ctrl + shift + p 
  .ctrl + => aumenta letra 
  .ctrl - => diminui letra 
  .package control 
    .plugins
      .emmets 
      .sublimeERB
      .jQuery
      .bufferscroll (relembrar)
      .color highlighter
      .applysyntax
      .indentguides
      .css3
      .sidebarenhancements

======================================================================
            MODULO 3
======================================================================

.template
  .sb admin 2 (github.com/dreamingechoes/bootstrap_sb_admin_base_v2)
        (https://startbootstrap.com/template-overviews/sb-admin-2/)
  .ecommerce (startbootstrap.com/template-categories/ecommerce/)

.gem devise
  .autenticação

.gem devise-i18n 

.gem better_errors
  .melhora a exposição dos erros (melhor que o padrão do rails)

.gem foreman
  .facilita comandos grandes, incluindo-os dentro de um arquivo

.tudo em rails em inglês

.active record command
  .find_or_create_by

.gem erd 
  .https://github.com/voormedia/rails-erd
  .https://voormedia.github.io/rails-erd/install.html
  .gera diagrama de entidade e relacionamento em pdf

.namespace
  .rails g controller backoffice/dashboard index 
               ou 
  .rails g controller backoffice::dashboard index 

.rails destroy controller <nome_controller>
  .destroi um controller
